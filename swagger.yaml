openapi: 3.0.0
info:
  title: Motork POC - Proxy of Carspark API
  description: API for accessing vehicle data and images from the Carspark API
  version: 1.0.0
  contact:
    name: MotorK Team
servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://motork-ai-videos-poc.onrender.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    
    Token:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        token_type:
          type: string
          description: Token type (usually 'bearer')
        expires_in:
          type: integer
          description: Token expiration time in seconds
        scope:
          type: string
          description: Token scopes
      required:
        - access_token
        - token_type
        - expires_in
    
    Vehicle:
      type: object
      properties:
        id:
          type: string
          description: Vehicle ID
        brand:
          type: string
          description: Vehicle brand
        model:
          type: string
          description: Vehicle model
        year:
          type: integer
          description: Manufacturing year
        exteriorColorName:
          type: string
          description: Exterior color name
        videoUrl:
          type: string
          description: URL to the generated video (if available)
      required:
        - id
        - brand
        - model
        
    VehicleList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Vehicle'
        totalElements:
          type: integer
          description: Total number of vehicles
        totalPages:
          type: integer
          description: Total number of pages
        size:
          type: integer
          description: Items per page
      required:
        - content
        - totalElements
        - totalPages
        - size
        
    Image:
      type: object
      properties:
        id:
          type: string
          description: Image ID
        url:
          type: string
          description: Image URL
      required:
        - id
        - url
        
    N8nRequest:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique session ID
        message:
          type: string
          description: User message
        page:
          type: string
          description: Optional page context
        lastResponse:
          type: string
          description: Optional previous response
      required:
        - sessionId
        - message

paths:
  /auth/token:
    post:
      summary: Authenticate and get access token
      description: Provides authentication via username/password and returns a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum: [password]
                client_id:
                  type: string
                  enum: [carspark-api]
                username:
                  type: string
                password:
                  type: string
              required:
                - grant_type
                - client_id
                - username
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /vehicles:
    get:
      summary: List vehicles
      description: Returns a paginated list of vehicles
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (zero-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: it
      responses:
        '200':
          description: List of vehicles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicle/{vehicleId}:
    get:
      summary: Get vehicle details
      description: Returns details for a specific vehicle
      tags:
        - Vehicles
      security:
        - BearerAuth: []
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: ID of the vehicle
          schema:
            type: string
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: it
      responses:
        '200':
          description: Vehicle details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicle/{vehicleId}/images/gallery:
    get:
      summary: Get vehicle gallery images
      description: Returns images for a specific vehicle
      tags:
        - Vehicles
        - Images
      security:
        - BearerAuth: []
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: ID of the vehicle
          schema:
            type: string
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: it
      responses:
        '200':
          description: List of vehicle images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Vehicle not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicle/{vehicleId}/images/gallery/upload:
    post:
      summary: Upload image to vehicle gallery
      description: Uploads a new image to the vehicle gallery
      tags:
        - Vehicles
        - Images
      security:
        - BearerAuth: []
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: ID of the vehicle
          schema:
            type: string
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: it
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
              required:
                - file
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
        '400':
          description: No file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /vehicle/{vehicleId}/images/gallery/{imageId}:
    delete:
      summary: Delete image from vehicle gallery
      description: Deletes a specific image from the vehicle gallery
      tags:
        - Vehicles
        - Images
      security:
        - BearerAuth: []
      parameters:
        - name: vehicleId
          in: path
          required: true
          description: ID of the vehicle
          schema:
            type: string
        - name: imageId
          in: path
          required: true
          description: ID of the image to delete
          schema:
            type: string
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: it
      responses:
        '200':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the operation was successful
                  vehicleId:
                    type: string
                    description: ID of the vehicle
                  imageId:
                    type: string
                    description: ID of the deleted image
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /n8n-proxy:
    post:
      summary: N8N proxy endpoint
      description: Forwards requests to N8N service
      tags:
        - N8N
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/N8nRequest'
      responses:
        '200':
          description: N8N response
          content:
            application/json:
              schema:
                type: object
                description: N8N response (format varies)
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'